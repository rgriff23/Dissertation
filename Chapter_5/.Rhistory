cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
topfriendsSN1 # idk?
topfriendsSN2 # the right
topfriendsSN3 # the left
head(twitter_data)
head(tweet_data)
tweet_data <- read.csv("~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/data/tweet_data.csv")
tweet_data$sentimentA <- factor(tweet_data$sentimentA, levels=c("Very Negative", "Negative", "Neutral", "Positive","Very Positive"))
tweet_data$sentimentB <- factor(tweet_data$sentimentB, levels=c("joy","sadness","anger","surprise","fear","disgust"))
tweet_data$time <- as.POSIXct(tweet_data$time, format="%Y-%m-%d %H:%M:%S")
head(tweet_data)
sum(is.na(tweet_data$cluster))
library(ggplot2)
geom_bar
?geom_bar
?barplot
table(tweet_data$sentimentA, tweet_data$cluster)
table(tweet_data$sentimentA, tweet_data$cluster)[,1:3]
tab1 <- table(tweet_data$sentimentA, tweet_data$cluster)[,1:3]
barplot(tab1, beside=TRUE, col=c("gray","red","blue"))
barplot(tab1, beside=TRUE, col=c("gray","red","blue"), legend.text = c("Apolitical", "Rightwing", "Leftwing"))
?legend
barplot(tab1, beside=TRUE, col=c("gray","red","blue"),
legend.text = c("Apolitical", "Rightwing", "Leftwing"),
args.legend = list("topleft"))
barplot(tab1, beside=TRUE, col=c("gray","red","blue"),
args.legend = list("topleft"))
legend("topleft", legend=c("Apolitical", "Rightwing", "Leftwing"))
legend("topleft", legend=c("Apolitical", "Rightwing", "Leftwing"), fill=c("gray","red","blue"))
barplot(tab1, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"))
barplot(tab1, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"),
main="Emotional valence (very negative to very positive)")
tab2 <- table(tweet_data$sentimentB, tweet_data$cluster)[,1:3]
tab2
barplot(tab2, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"),
main="Emotional tone (joy, sadness, anger, surprise, fear, disgust)")
library("tm")
library("wordcloud")
# create corpuses (corpi?)
corpus1 <- Corpus(VectorSource(tweet_data$text[tweet_data$cluster==1]))
corpus1 <- tm_map(tm_map(corpus1, removeWords, stopwords('english')), stemDocument)
corpus2 <- Corpus(VectorSource(tweet_data$text[tweet_data$cluster==2]))
corpus2 <- tm_map(tm_map(corpus2, removeWords, stopwords('english')), stemDocument)
corpus3 <- Corpus(VectorSource(tweet_data$text[tweet_data$cluster==3]))
corpus3 <- tm_map(tm_map(corpus3, removeWords, stopwords('english')), stemDocument)
# wordclouds
wordcloud(corpus1$content, max.words = 100, colors=heat.colors(6), random.order = FALSE)
wordcloud(corpus2$content, max.words = 100, colors=heat.colors(6), random.order = FALSE)
wordcloud(corpus3$content, max.words = 100, colors=heat.colors(6), random.order = FALSE)
cols <- rep("white", vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout);sleep(3)
}
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
sleep(5)
print(i)
}
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
Sys.sleep(5)
print(i)
}
?barplot
tab0 <- table(tweet_data$time_bin, tweet_data$cluster)[1:3]
tab0
tab0 <- table(tweet_data$time_bin, tweet_data$cluster)[,1:3]
tab0
colnames(tab0) <- c("Apolitical","Rightwing","Leftwing")
rownames(tab0) <- 1:12
tab0
barplot(tab0, beside=FALSE)
#
tab0 <- table(tweet_data$cluster,tweet_data$time_bin)[1:3,]
rownames(tab0) <- c("Apolitical","Rightwing","Leftwing")
colnames(tab0) <- 1:12
barplot(tab0, beside=FALSE)
barplot(tab0, beside=FALSE, col=c("red","yellow","blue"))
barplot(tab0, beside=FALSE, col=c("gray","red","blue"), xlab="time", ylab="frequency")
legend("topleft", fill=c("gray","red","blue"), legend= c("Apolitical","Rightwing","Leftwing"))
barplot(tab0, beside=FALSE, col=c("gray","red","blue"), xlab="time", ylab="frequency")
legend("topleft", fill=c("blue","red","gray"), legend= c("Leftwing","Rightwing","Apolitical"))
# side-by-side barplot for emotional valence
tab1 <- table(tweet_data$sentimentA, tweet_data$cluster)[,1:3]
barplot(tab1, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"),
main="Emotional valence (very negative to very positive)")
# side-by-side barplot for emotional tone
tab2 <- table(tweet_data$sentimentB, tweet_data$cluster)[,1:3]
barplot(tab2, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"),
main="Emotional tone (joy, sadness, anger, surprise, fear, disgust)")
wordcloud(corpus1$content, max.words = 100, colors=heat.colors(6), random.order = FALSE)
wordcloud(corpus2$content, max.words = 100, colors=heat.colors(6), random.order = FALSE)
wordcloud(corpus3$content, max.words = 100, colors=heat.colors(6), random.order = FALSE)
cloudC <- ddply(tweet_data[tweet_data$cluster%in%c(1:3),], .(cluster), function (x) {paste(x$text, collapse=" ")})
cloudC <- Corpus(VectorSource(cloudC$V1))
cloudC <- tm_map(tm_map(cloudC, removeWords, stopwords('english')), stemDocument)
cloudC <- as.matrix(TermDocumentMatrix(cloudC))
library(plyr)
cloudC <- ddply(tweet_data[tweet_data$cluster%in%c(1:3),], .(cluster), function (x) {paste(x$text, collapse=" ")})
cloudC <- Corpus(VectorSource(cloudC$V1))
cloudC <- tm_map(tm_map(cloudC, removeWords, stopwords('english')), stemDocument)
cloudC <- as.matrix(TermDocumentMatrix(cloudC))
colnames(cloudC) <- levels(tweet_data$sentimentC)
levels(tweet_data$sentimentC)
colnames(cloudC) <- 1:3
cloudC
cloudC <- cloudC[,c("Apolitical", "Rightwing","Leftwing")]
comparison.cloud(cloudC, max.words=60, scale=c(4,.5), title.size=2, colors=c("gray","red","blue"))
colnames(cloudC) <- c("Apolitical", "Rightwing","Leftwing")
comparison.cloud(cloudC, max.words=60, scale=c(4,.5), title.size=2, colors=c("gray","red","blue"))
colSums(cloudC)
tab0 <- table(tweet_data$cluster,tweet_data$time_bin)[1:3,]
rownames(tab0) <- c("Apolitical","Rightwing","Leftwing")
colnames(tab0) <- 1:12
barplot(tab0, beside=FALSE, col=c("gray","red","blue"), xlab="time", ylab="frequency")
legend("topleft", fill=c("blue","red","gray"), legend= c("Leftwing","Rightwing","Apolitical"))
# side-by-side barplot for emotional valence
tab1 <- table(tweet_data$sentimentA, tweet_data$cluster)[,1:3]
barplot(tab1, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"),
main="Emotional valence (very negative to very positive)")
# side-by-side barplot for emotional tone
tab2 <- table(tweet_data$sentimentB, tweet_data$cluster)[,1:3]
barplot(tab2, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"),
main="Emotional tone (joy, sadness, anger, surprise, fear, disgust)")
saveGIF({
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
convert <- "/opt/local/bin"
convert <- "/opt/local/bin/"
saveGIF({
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
convert <- "/opt/local/bin/convert"
saveGIF({
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
saveGIF({
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
# load packages
library("geomorph")
library("Morpho")
library("tidyverse")
library("plyr")
library("abind")
library("cluster")
library("factoextra")
library("gridExtra")
?phylo.integration
# set working directory
setwd("~/Desktop/GitHub/Dissertation/Chapter_5/")
# load custom functions
source("../Chapter_4/R/functions/read.pp.R")
source("../Chapter_4/R/functions/plot_wireframes.R")
source("R/functions/PIC_mats.R")
source("R/functions/Goswami_modularity_test.R")
# read & tidy data
data <- read.csv("../Chapter_4/data/primate_data.csv") %>%
mutate(id = paste(Genus, Species, Sex, MuseumID, sep="_"),
genus_species = paste(Genus, Species, sep="_")) %>%
select(Superfamily, Sex, SexDat, DimorphismIndex, id, genus_species) %>%
arrange(id)
# read phylogeny
tree <- read.nexus("../Chapter_2/data/tree.nex")
# read landmarks & add dimnames
path = "../Chapter_4/data/"
files <- paste(path, list.files(path=path, pattern=".pp"), sep="")
landmarks <- NULL
for (i in 1:length(files)) {landmarks <- abind(landmarks, read.pp(files[i]), along=3)}
dimnames(landmarks)[[3]] <- unlist(strsplit(unlist(strsplit(files, path))[seq(from=2, to=244, length.out=122)], "_picked_points.pp"))
rm(path, files)
# separate data, tree, and landmarks for males and females
data.f <- filter(data, SexDat %in% c("F","B")) %>% select(-Sex, -SexDat)
data.m <- filter(data, SexDat %in% c("M","B")) %>% select(-Sex, -SexDat)
landmarks.f <- landmarks[,,dimnames(landmarks)[[3]]%in%data.f$id]
dimnames(landmarks.f)[[3]] <- data.f$genus_species
landmarks.m <- landmarks[,,dimnames(landmarks)[[3]]%in%data.m$id]
dimnames(landmarks.m)[[3]] <- data.m$genus_species
# estimate missing landmarks for males and females
landmarks.f <- estimate.missing(landmarks.f, method="Reg")
dimnames(landmarks.f)[1:2] <- dimnames(landmarks)[1:2]
landmarks.m <- estimate.missing(landmarks.m, method="Reg")
dimnames(landmarks.m)[1:2] <- dimnames(landmarks)[1:2]
# list of strepsirrhine/haplorhine males/females
streps.f <- data.f[data.f$Superfamily%in%c("Galagoidea","Lemuroidea"),c("DimorphismIndex", "genus_species")]
streps.m <- data.m[data.m$Superfamily%in%c("Galagoidea","Lemuroidea"),c("DimorphismIndex", "genus_species")]
haps.f <- data.f[data.f$Superfamily%in%c("Cercopithecoidea","Ceboidea","Hominoidea"),c("DimorphismIndex", "genus_species")]
haps.m <- data.m[data.m$Superfamily%in%c("Cercopithecoidea","Ceboidea","Hominoidea"),c("DimorphismIndex", "genus_species")]
# subset tree for male/female strepsirrhines/haplorhines
tree.primates.f <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% data.f$genus_species)])
tree.primates.m <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% data.m$genus_species)])
tree.streps.f <- drop.tip(tree, tree$tip.label[!tree$tip.label %in% streps.f$genus_species])
tree.streps.m <- drop.tip(tree, tree$tip.label[!tree$tip.label %in% streps.m$genus_species])
tree.haps.f <- drop.tip(tree, tree$tip.label[!tree$tip.label %in% haps.f$genus_species])
tree.haps.m <- drop.tip(tree, tree$tip.label[!tree$tip.label %in% haps.m$genus_species])
# procrustes alignment for males and females (all primates, strepsirrhines, haplorhines)
gpa.primates.f <- gpagen(landmarks.f)
gpa.primates.m <- gpagen(landmarks.m)
gpa.streps.f <- gpagen(landmarks.f[,,dimnames(landmarks.f)[[3]]%in%streps.f$genus_species])
gpa.streps.m <- gpagen(landmarks.m[,,dimnames(landmarks.m)[[3]]%in%streps.m$genus_species])
gpa.haps.f <- gpagen(landmarks.f[,,dimnames(landmarks.f)[[3]]%in%haps.f$genus_species])
gpa.haps.m <- gpagen(landmarks.m[,,dimnames(landmarks.m)[[3]]%in%haps.m$genus_species])
# create matrices of control variables (centroid size, dimorphism index) for each dataset
cvar.primates.f <- matrix(c(log(gpa.primates.f$Csize), data.f$DimorphismIndex), ncol=2)
cvar.primates.m <- matrix(c(log(gpa.primates.m$Csize), data.m$DimorphismIndex), ncol=2)
cvar.streps.f <- matrix(c(log(gpa.streps.f$Csize), streps.f$DimorphismIndex), ncol=2)
cvar.streps.m <- matrix(c(log(gpa.streps.m$Csize), streps.m$DimorphismIndex), ncol=2)
cvar.haps.f <- matrix(c(log(gpa.haps.f$Csize), haps.f$DimorphismIndex), ncol=2)
cvar.haps.m <- matrix(c(log(gpa.haps.m$Csize), haps.m$DimorphismIndex), ncol=2)
# no control variables
u.primates.f <- PIC_mats(gpa.primates.f$coords, tree.primates.f)
u.primates.m <- PIC_mats(gpa.primates.m$coords, tree.primates.m)
u.streps.f <- PIC_mats(gpa.streps.f$coords, tree.streps.f)
u.streps.m <- PIC_mats(gpa.streps.m$coords, tree.streps.m)
u.haps.f <- PIC_mats(gpa.haps.f$coords, tree.haps.f)
u.haps.m <- PIC_mats(gpa.haps.m$coords, tree.haps.m)
# include control variables
c.primates.f <- PIC_mats(gpa.primates.f$coords, tree.primates.f, controlVars=cvar.primates.f)
c.primates.m <- PIC_mats(gpa.primates.m$coords, tree.primates.m, controlVars=cvar.primates.m)
c.streps.f <- PIC_mats(gpa.streps.f$coords, tree.streps.f, controlVars=cvar.streps.f)
c.streps.m <- PIC_mats(gpa.streps.m$coords, tree.streps.m, controlVars=cvar.streps.m)
c.haps.f <- PIC_mats(gpa.haps.f$coords, tree.haps.f, controlVars=cvar.haps.f)
c.haps.m <- PIC_mats(gpa.haps.m$coords, tree.haps.m, controlVars=cvar.haps.m)
# proposed modules
partition <- c("F","F","M","M","F","M","F","M","M","M","M","M","N","F","F","F","F","F","N","N","N","N","N","N","N","N")
partition2 <- c("B","B","B","B","B","B","B","B","C","C","C","C","C","A","A","A","A","A","A","A","C","A","C","C","C","A")
partition3 <- c("A","A","A","A","B","B","B","B","B","C","C","C","C","B","C","C","A","C","A","C","C","A","A","B","B","B")
phylo.integration(gpa.primates.f$coords, phy=tree.primates.f, partition.gp=partition) # r = 0.87, p = 0.001 ***
phylo.integration(gpa.primates.m$coords, phy=tree.primates.m, partition.gp=partition) # r = 0.9, p = 0.001 ***
phylo.integration(gpa.streps.f$coords, phy=tree.streps.f, partition.gp=partition) # r = 0.9, p = 0.007 **
phylo.integration(gpa.streps.m$coords, phy=tree.streps.m, partition.gp=partition) # r = 0.86, p = 0.004 **
phylo.integration(gpa.haps.f$coords, phy=tree.haps.f, partition.gp=partition) # r = 0.87, p = 0.001 ***
phylo.integration(gpa.haps.m$coords, phy=tree.haps.m, partition.gp=partition) # r = 0.92, p = 0.001 ***
integration.test(u.primates.f$pics, partition.gp=rep(partition, each=3)) # r = 0.852, p = 0.001 ***
integration.test(u.primates.m$pics, partition.gp=rep(partition, each=3)) # r = 0.901, p = 0.001 ***
integration.test(u.streps.f$pics, partition.gp=rep(partition, each=3)) # r = 0.921, p = 0.012 *
integration.test(u.streps.m$pics, partition.gp=rep(partition, each=3)) # r = 0.872, p = 0.001 ***
integration.test(u.haps.f$pics, partition.gp=rep(partition, each=3)) # r = 0.885, p = 0.001 ***
integration.test(u.haps.m$pics, partition.gp=rep(partition, each=3)) # r = 0.92, p = 0.001 ***
modularity.test(u.primates.f$pics, partition.gp=rep(partition, each=3)) # CR = 0.9345, p = 0.001 ***
modularity.test(u.primates.m$pics, partition.gp=rep(partition, each=3)) # CR = 0.9704, p = 0.007 **
modularity.test(u.streps.f$pics, partition.gp=rep(partition, each=3)) # CR = 1.001, p = 0.168
modularity.test(u.streps.m$pics, partition.gp=rep(partition, each=3)) # CR = 0.9423, p = 0.005 **
modularity.test(u.haps.f$pics, partition.gp=rep(partition, each=3)) # CR = 0.9696, p = 0.002 **
modularity.test(u.haps.m$pics, partition.gp=rep(partition, each=3)) # CR = 0.9866, p = 0.013 *
?modularity.test
?phylo.modularity
u.primates.f$pics
gpa.primates.f$coords
u.primates.f$pics
dim(gpa.primates.f$coords)
dim(u.primates.f$pics)
length(rep(partition, each=3))
78/3
integration.test(u.primates.f$pics, partition.gp=rep(partition, each=4)) # r = 0.852, p = 0.001 ***
phylo.modularity(gpa.primates.f$coords, phy=tree.primates.f, partition.gp=partition) # CR = 1.07, p = 0.895
modularity.test(u.primates.f$pics, partition.gp=rep(partition, each=3)) # CR = 0.9345, p = 0.001 ***
PIC_mats
modularity.test(u.primates.f$pics, partition.gp=rep(partition, each=3)) # CR = 0.9345, p = 0.001 ***
modularity.test(u.primates.m$pics, partition.gp=rep(partition, each=3)) # CR = 0.9704, p = 0.007 **
modularity.test(u.streps.f$pics, partition.gp=rep(partition, each=3)) # CR = 1.001, p = 0.168
modularity.test(u.streps.m$pics, partition.gp=rep(partition, each=3)) # CR = 0.9423, p = 0.005 **
modularity.test(u.haps.f$pics, partition.gp=rep(partition, each=3)) # CR = 0.9696, p = 0.002 **
modularity.test(u.haps.m$pics, partition.gp=rep(partition, each=3)) # CR = 0.9866, p = 0.013 *
PIC_mats()
PIC_mats
phylo.modularity(gpa.primates.f$coords, phy=tree.primates.f, partition.gp=partition2) # CR = 1.07, p = 0.895
phylo.modularity(gpa.primates.m$coords, phy=tree.primates.m, partition.gp=partition2)  # CR = 1.13, p = 1
phylo.modularity(gpa.streps.f$coords, phy=tree.streps.f, partition.gp=partition2) # CR = 1.1, p = 1
phylo.modularity(gpa.streps.m$coords, phy=tree.streps.m, partition.gp=partition2) # CR = 1.36, p = 1
phylo.modularity(gpa.haps.f$coords, phy=tree.haps.f, partition.gp=partition2) # CR = 1.09, p = 1
phylo.modularity(gpa.haps.m$coords, phy=tree.haps.m, partition.gp=partition2) # CR = 1.13, p = 1
partition2 <- c("F","F","F","F","F","F","F","F","F","F","F","F","N","F","F","F","F","F","N","N","N","N","N","N","N","N")
table(partition2)
partition2 <- c("F","F","F","F","F","F","F","F","F","F","F","F","N","F","F","F","F","F","N","N","N","N","N","N","N","N")
phylo.modularity(gpa.primates.f$coords, phy=tree.primates.f, partition.gp=partition2) # CR = 1.07, p = 0.895
phylo.modularity(gpa.primates.m$coords, phy=tree.primates.m, partition.gp=partition2)  # CR = 1.13, p = 1
phylo.modularity(gpa.streps.f$coords, phy=tree.streps.f, partition.gp=partition2) # CR = 1.1, p = 1
phylo.modularity(gpa.streps.m$coords, phy=tree.streps.m, partition.gp=partition2) # CR = 1.36, p = 1
phylo.modularity(gpa.haps.f$coords, phy=tree.haps.f, partition.gp=partition2) # CR = 1.09, p = 1
phylo.modularity(gpa.haps.m$coords, phy=tree.haps.m, partition.gp=partition2) # CR = 1.13, p = 1
gpa.primates.f$coords
dim(gpa.primates.f$coords)
gpa.primates.f$coords[partition!="M",,]
partition2 <- c("F","F","F","F","N","F","F","F","F","F","N","N","N","N","N","N","N","N")
table(partition2)
phylo.modularity(gpa.primates.f$coords[partition!="M",,], phy=tree.primates.f, partition.gp=partition2) # CR = 1.07, p = 0.895
phylo.modularity(gpa.primates.m$coords[partition!="M",,], phy=tree.primates.m, partition.gp=partition2)  # CR = 1.13, p = 1
phylo.modularity(gpa.streps.f$coords[partition!="M",,], phy=tree.streps.f, partition.gp=partition2) # CR = 1.1, p = 1
phylo.modularity(gpa.streps.m$coords[partition!="M",,], phy=tree.streps.m, partition.gp=partition2) # CR = 1.36, p = 1
phylo.modularity(gpa.haps.f$coords[partition!="M",,], phy=tree.haps.f, partition.gp=partition2) # CR = 1.09, p = 1
phylo.modularity(gpa.haps.m$coords[partition!="M",,], phy=tree.haps.m, partition.gp=partition2) # CR = 1.13, p = 1
phylo.modularity(gpa.primates.f$coords, phy=tree.primates.f, partition.gp=partition)$CR.mat
phylo.modularity(gpa.streps.m$coords, phy=tree.streps.m, partition.gp=partition)$CR.mat
gpa.primates.f$coords[partition!="M",,]
phylo.integration(gpa.streps.m$coords, phy=tree.streps.m, partition.gp=partition)$CR.mat
phylo.modularity(gpa.streps.m$coords, phy=tree.streps.m, partition.gp=partition)$CR.mat
# load packages
library("geomorph")
library("Morpho")
library("tidyverse")
library("plyr")
library("abind")
library("cluster")
library("factoextra")
library("gridExtra")
# set working directory
setwd("~/Desktop/GitHub/Dissertation/Chapter_5/")
# load custom functions
source("../Chapter_4/R/functions/read.pp.R")
source("../Chapter_4/R/functions/plot_wireframes.R")
source("R/functions/PIC_mats.R")
source("R/functions/Goswami_modularity_test.R")
# read & tidy data
data <- read.csv("../Chapter_4/data/primate_data.csv") %>%
mutate(id = paste(Genus, Species, Sex, MuseumID, sep="_"),
genus_species = paste(Genus, Species, sep="_")) %>%
select(Superfamily, Sex, SexDat, DimorphismIndex, id, genus_species) %>%
arrange(id)
# read phylogeny
tree <- read.nexus("../Chapter_2/data/tree.nex")
# read landmarks & add dimnames
path = "../Chapter_4/data/"
files <- paste(path, list.files(path=path, pattern=".pp"), sep="")
landmarks <- NULL
for (i in 1:length(files)) {landmarks <- abind(landmarks, read.pp(files[i]), along=3)}
dimnames(landmarks)[[3]] <- unlist(strsplit(unlist(strsplit(files, path))[seq(from=2, to=244, length.out=122)], "_picked_points.pp"))
rm(path, files)
# separate data, tree, and landmarks for males and females
data.f <- filter(data, SexDat %in% c("F","B")) %>% select(-Sex, -SexDat)
data.m <- filter(data, SexDat %in% c("M","B")) %>% select(-Sex, -SexDat)
landmarks.f <- landmarks[,,dimnames(landmarks)[[3]]%in%data.f$id]
dimnames(landmarks.f)[[3]] <- data.f$genus_species
landmarks.m <- landmarks[,,dimnames(landmarks)[[3]]%in%data.m$id]
dimnames(landmarks.m)[[3]] <- data.m$genus_species
# estimate missing landmarks for males and females
landmarks.f <- estimate.missing(landmarks.f, method="Reg")
dimnames(landmarks.f)[1:2] <- dimnames(landmarks)[1:2]
landmarks.m <- estimate.missing(landmarks.m, method="Reg")
dimnames(landmarks.m)[1:2] <- dimnames(landmarks)[1:2]
# list of strepsirrhine/haplorhine males/females
streps.f <- data.f[data.f$Superfamily%in%c("Galagoidea","Lemuroidea"),c("DimorphismIndex", "genus_species")]
streps.m <- data.m[data.m$Superfamily%in%c("Galagoidea","Lemuroidea"),c("DimorphismIndex", "genus_species")]
haps.f <- data.f[data.f$Superfamily%in%c("Cercopithecoidea","Ceboidea","Hominoidea"),c("DimorphismIndex", "genus_species")]
haps.m <- data.m[data.m$Superfamily%in%c("Cercopithecoidea","Ceboidea","Hominoidea"),c("DimorphismIndex", "genus_species")]
# subset tree for male/female strepsirrhines/haplorhines
tree.primates.f <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% data.f$genus_species)])
tree.primates.m <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% data.m$genus_species)])
tree.streps.f <- drop.tip(tree, tree$tip.label[!tree$tip.label %in% streps.f$genus_species])
tree.streps.m <- drop.tip(tree, tree$tip.label[!tree$tip.label %in% streps.m$genus_species])
tree.haps.f <- drop.tip(tree, tree$tip.label[!tree$tip.label %in% haps.f$genus_species])
tree.haps.m <- drop.tip(tree, tree$tip.label[!tree$tip.label %in% haps.m$genus_species])
# procrustes alignment for males and females (all primates, strepsirrhines, haplorhines)
gpa.primates.f <- gpagen(landmarks.f)
gpa.primates.m <- gpagen(landmarks.m)
gpa.streps.f <- gpagen(landmarks.f[,,dimnames(landmarks.f)[[3]]%in%streps.f$genus_species])
gpa.streps.m <- gpagen(landmarks.m[,,dimnames(landmarks.m)[[3]]%in%streps.m$genus_species])
gpa.haps.f <- gpagen(landmarks.f[,,dimnames(landmarks.f)[[3]]%in%haps.f$genus_species])
gpa.haps.m <- gpagen(landmarks.m[,,dimnames(landmarks.m)[[3]]%in%haps.m$genus_species])
# size-preserving Procrustes superimposition
gpa2.primates.f <- procSym(landmarks.f, reflect=FALSE, scale=FALSE, CSinit=FALSE)$rotated
gpa2.primates.m <- procSym(landmarks.m, reflect=FALSE, scale=FALSE, CSinit=FALSE)$rotated
gpa2.streps.f <- procSym(landmarks.f[,,dimnames(landmarks.f)[[3]]%in%streps.f$genus_species], reflect=FALSE, scale=FALSE, CSinit=FALSE)$rotated
gpa2.streps.m <- procSym(landmarks.m[,,dimnames(landmarks.m)[[3]]%in%streps.m$genus_species], reflect=FALSE, scale=FALSE, CSinit=FALSE)$rotated
gpa2.haps.f <- procSym(landmarks.f[,,dimnames(landmarks.f)[[3]]%in%haps.f$genus_species], reflect=FALSE, scale=FALSE, CSinit=FALSE)$rotated
gpa2.haps.m <- procSym(landmarks.m[,,dimnames(landmarks.m)[[3]]%in%haps.m$genus_species], reflect=FALSE, scale=FALSE, CSinit=FALSE)$rotated
# create matrices of control variables (centroid size, dimorphism index) for each dataset
cvar.primates.f <- matrix(c(log(gpa.primates.f$Csize), data.f$DimorphismIndex), ncol=2)
cvar.primates.m <- matrix(c(log(gpa.primates.m$Csize), data.m$DimorphismIndex), ncol=2)
cvar.streps.f <- matrix(c(log(gpa.streps.f$Csize), streps.f$DimorphismIndex), ncol=2)
cvar.streps.m <- matrix(c(log(gpa.streps.m$Csize), streps.m$DimorphismIndex), ncol=2)
cvar.haps.f <- matrix(c(log(gpa.haps.f$Csize), haps.f$DimorphismIndex), ncol=2)
cvar.haps.m <- matrix(c(log(gpa.haps.m$Csize), haps.m$DimorphismIndex), ncol=2)
######################################################################################################
# COMPUTE PIC-BASED LANDMARK VCV MATRICES, EUCLIDEAN DISTANCE MATRICES, and MULTIDIMENSIONAL SCALING #
######################################################################################################
# no control variables
u.primates.f <- PIC_mats(gpa.primates.f$coords, tree.primates.f)
u.primates.m <- PIC_mats(gpa.primates.m$coords, tree.primates.m)
u.streps.f <- PIC_mats(gpa.streps.f$coords, tree.streps.f)
u.streps.m <- PIC_mats(gpa.streps.m$coords, tree.streps.m)
u.haps.f <- PIC_mats(gpa.haps.f$coords, tree.haps.f)
u.haps.m <- PIC_mats(gpa.haps.m$coords, tree.haps.m)
# include control variables
c.primates.f <- PIC_mats(gpa.primates.f$coords, tree.primates.f, controlVars=cvar.primates.f)
c.primates.m <- PIC_mats(gpa.primates.m$coords, tree.primates.m, controlVars=cvar.primates.m)
c.streps.f <- PIC_mats(gpa.streps.f$coords, tree.streps.f, controlVars=cvar.streps.f)
c.streps.m <- PIC_mats(gpa.streps.m$coords, tree.streps.m, controlVars=cvar.streps.m)
c.haps.f <- PIC_mats(gpa.haps.f$coords, tree.haps.f, controlVars=cvar.haps.f)
c.haps.m <- PIC_mats(gpa.haps.m$coords, tree.haps.m, controlVars=cvar.haps.m)
# Goswami approach
g.primates.f <- PIC_mats(gpa2.primates.f, tree.primates.f, goswami=T, landmark_names=dimnames(landmarks)[[1]])
g.primates.m <- PIC_mats(gpa2.primates.m, tree.primates.m, goswami=T, landmark_names=dimnames(landmarks)[[1]])
g.streps.f <- PIC_mats(gpa2.streps.f, tree.streps.f, goswami=T, landmark_names=dimnames(landmarks)[[1]])
g.streps.m <- PIC_mats(gpa2.streps.m, tree.streps.m, goswami=T, landmark_names=dimnames(landmarks)[[1]])
g.haps.f <- PIC_mats(gpa2.haps.f, tree.haps.f, goswami=T, landmark_names=dimnames(landmarks)[[1]])
g.haps.m <- PIC_mats(gpa2.haps.m, tree.haps.m, goswami=T, landmark_names=dimnames(landmarks)[[1]])
######################################
# CLUSTER ANALYSIS AND VISUALIZATION #
######################################
# Ward's clustering
k <- 6
# no control variables
res.u.primates.f <- hcut(u.primates.f$dmat, k = 6)
res.u.primates.m <- hcut(u.primates.m$dmat, k = 6)
res.u.streps.f <- hcut(u.streps.f$dmat, k = 6)
res.u.streps.m <- hcut(u.streps.m$dmat, k = 6)
res.u.haps.f <- hcut(u.haps.f$dmat, k = 6)
res.u.haps.m <- hcut(u.haps.m$dmat, k = 6)
# include control variables
res.c.primates.f <- hcut(c.primates.f$dmat, k = 6)
res.c.primates.m <- hcut(c.primates.m$dmat, k = 6)
res.c.streps.f <- hcut(c.streps.f$dmat, k = 6)
res.c.streps.m <- hcut(c.streps.m$dmat, k = 6)
res.c.haps.f <- hcut(c.haps.f$dmat, k = 6)
res.c.haps.m <- hcut(c.haps.m$dmat, k = 6)
# Goswami covariance, PPA
res.g.primates.f <- hcut(g.primates.f$dmat, k = 6)
res.g.primates.m <- hcut(g.primates.m$dmat, k = 6)
res.g.streps.f <- hcut(g.streps.f$dmat, k = 6)
res.g.streps.m <- hcut(g.streps.m$dmat, k = 6)
res.g.haps.f <- hcut(g.haps.f$dmat, k = 6)
res.g.haps.m <- hcut(g.haps.m$dmat, k = 6)
lab_adj <- 1 # smaller -> more room for labels
# primates.f
d1a <- fviz_dend(res.u.primates.f, labels_track_height=max(res.u.primates.f$height)/lab_adj, horiz=TRUE, main="Primate females - No control")
d1b <- fviz_dend(res.c.primates.f, labels_track_height=max(res.c.primates.f$height)/lab_adj, horiz=TRUE, main="Corrected data")
d1c <- fviz_dend(res.g.primates.f, labels_track_height=max(res.g.primates.f$height)/lab_adj, horiz=TRUE, main="Goswami method")
grid.arrange(d1a, d1b, d1c, ncol=3)
d2a <- fviz_dend(res.u.primates.m, labels_track_height=max(res.u.primates.m$height)/lab_adj, horiz=TRUE, main="Primate males - No control")
d2b <- fviz_dend(res.c.primates.m, labels_track_height=max(res.c.primates.m$height)/lab_adj, horiz=TRUE, main="Corrected data")
d2c <- fviz_dend(res.g.primates.m, labels_track_height=max(res.g.primates.m$height)/lab_adj, horiz=TRUE, main="Goswami method")
grid.arrange(d2a, d2b, d2c, ncol=3)
d3a <- fviz_dend(res.u.streps.f, labels_track_height=max(res.u.streps.f$height)/lab_adj, horiz=TRUE, main="Strepsirrhine females - No control")
d3b <- fviz_dend(res.c.streps.f, labels_track_height=max(res.c.streps.f$height)/lab_adj, horiz=TRUE, main="Corrected data")
d3c <- fviz_dend(res.g.streps.f, labels_track_height=max(res.g.streps.f$height)/lab_adj, horiz=TRUE, main="Goswami method")
grid.arrange(d3a, d3b, d3c, ncol=3)
# streps.m
d4a <- fviz_dend(res.u.streps.m, labels_track_height=max(res.u.streps.m$height)/lab_adj, horiz=TRUE, main="Strepsirrhine males - No control")
d4b <- fviz_dend(res.c.streps.m, labels_track_height=max(res.c.streps.m$height)/lab_adj, horiz=TRUE, main="Corrected data")
d4c <- fviz_dend(res.g.streps.m, labels_track_height=max(res.g.streps.m$height)/lab_adj, horiz=TRUE, main="Goswami method")
grid.arrange(d4a, d4b, d4c, ncol=3)
# haps.f
d5a <- fviz_dend(res.u.haps.f, labels_track_height=max(res.u.haps.f$height)/lab_adj, horiz=TRUE, main="Haplorhine females - No control")
d5b <- fviz_dend(res.c.haps.f, labels_track_height=max(res.c.haps.f$height)/lab_adj, horiz=TRUE, main="Corrected data")
d5c <- fviz_dend(res.g.haps.f, labels_track_height=max(res.g.haps.f$height)/lab_adj, horiz=TRUE, main="Goswami method")
grid.arrange(d5a, d5b, d5c, ncol=3)
d6a <- fviz_dend(res.u.haps.m, labels_track_height=max(res.u.haps.m$height)/lab_adj, horiz=TRUE, main="Haplorhine males - No control")
d6b <- fviz_dend(res.c.haps.m, labels_track_height=max(res.c.haps.m$height)/lab_adj, horiz=TRUE, main="Corrected data")
d6c <- fviz_dend(res.g.haps.m, labels_track_height=max(res.g.haps.m$height)/lab_adj, horiz=TRUE, main="Goswami method")
grid.arrange(d6a, d6b, d6c, ncol=3)
