k.primates.f.plot1 <- fviz_nbclust(1-k.primates.f$LCM, hcut, method = "wss", k.max=13, isdiss=T) +
labs(title="Primates - females", subtitle = "Elbow method")
k.primates.f.plot2 <- fviz_nbclust(1-k.primates.f$LCM, hcut, method = "silhouette", k.max=13, isdiss=T) +
labs(title="", subtitle = "Silhouette method")
k.primates.f.plot3 <- fviz_nbclust(1-k.primates.f$LCM, hcut, method = "gap_stat", k.max=13, isdiss=T) +
labs(title="", subtitle = "Gap statistic method")
k.primates.f.plot1 <- fviz_nbclust(1-k.primates.f$LCM, hcut, method = "wss", isdiss=T) +
labs(title="Primates - females", subtitle = "Elbow method")
k.primates.f.plot1 <- fviz_nbclust(1-k.primates.f$LCM, hcut, method = "wss", k.max=13, isdiss=T) +
labs(title="Primates - females", subtitle = "Elbow method")
k.primates.f.plot1 <- fviz_nbclust(1-k.primates.f$LCM, hcut, method = "wss", isdiss=T) +
labs(title="Primates - females", subtitle = "Elbow method")
?fviz_nbclust
x=cmdscale(1-k.primates.f$LCM,k=25)
k.primates.f.plot1 <- fviz_nbclust(x, hcut, method = "wss", k.max=13) +
labs(title="Primates - females", subtitle = "Elbow method")
k.primates.f.plot2 <- fviz_nbclust(x, hcut, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.primates.f.plot3 <- fviz_nbclust(x, hcut, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
x=cmdscale(1-k.primates.m$LCM, k=25)
k.primates.m.plot1 <- fviz_nbclust(x, hcut, method = "wss", k.max=13) +
labs(title="Males", subtitle = "Elbow method")
k.primates.m.plot2 <- fviz_nbclust(x, hcut, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.primates.m.plot3 <- fviz_nbclust(x, hcut, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
grid.arrange(k.primates.f.plot1, k.primates.f.plot2, k.primates.f.plot3, k.primates.m.plot1, k.primates.m.plot2, k.primates.m.plot3, ncol=3)
x=cmdscale(1-k.streps.f$LCM, k=25)
k.streps.f.plot1 <- fviz_nbclust(x, hcut, method = "wss", k.max=13) +
labs(title="Strepsirrhines - females", subtitle = "Elbow method")
k.streps.f.plot2 <- fviz_nbclust(x, hcut, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.streps.f.plot3 <- fviz_nbclust(x, hcut, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
x=cmdscale(1-k.streps.m$LCM, k=25)
k.streps.m.plot1 <- fviz_nbclust(x, hcut, method = "wss", k.max=13) +
labs(title="Males", subtitle = "Elbow method")
k.streps.m.plot2 <- fviz_nbclust(x, hcut, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.streps.m.plot3 <- fviz_nbclust(x, hcut, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method", k.max=13)
grid.arrange(k.streps.f.plot1, k.streps.f.plot2, k.streps.f.plot3, k.streps.m.plot1, k.streps.m.plot2, k.streps.m.plot3, ncol=3)
x=cmdscale(1-k.haps.f$LCM, k=25)
k.haps.f.plot1 <- fviz_nbclust(x, hcut, method = "wss", k.max=13) +
labs(title="Haplorhines - females", subtitle = "Elbow method")
k.haps.f.plot2 <- fviz_nbclust(x, hcut, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.haps.f.plot3 <- fviz_nbclust(x, hcut, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
x=cmdscale(1-k.haps.m$LCM, k=25)
k.haps.m.plot1 <- fviz_nbclust(x, hcut, method = "wss", k.max=13) +
labs(title="Males", subtitle = "Elbow method")
k.haps.m.plot2 <- fviz_nbclust(x, hcut, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.haps.m.plot3 <- fviz_nbclust(x, hcut, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
grid.arrange(k.haps.f.plot1, k.haps.f.plot2, k.haps.f.plot3, k.haps.m.plot1, k.haps.m.plot2, k.haps.m.plot3, ncol=3)
coords
x <- coords2d[,(3*i-3):(3*i)]
y <- coords2d[,(3*j-3):(3*j)]
XY.vcv <- cov(cbind(x,y))
head(XY.vcv)
cov
?cov
head(XY.vcv)
head(cov(x,y))
?E
t(x)%*%y
?cov
x
y
coords2d
dim(Kronecker product)
dim(coords2d)
for (i in 2:dim(coords)[1]) {
for (j in 1:(i-1)) {
x <- coords2d[,(3*i-3):(3*i)]
y <- coords2d[,(3*j-3):(3*j)]}}
dim(x)
dim(y)
head(x)
head(y)
dim(coords)[1]
26*3
dim(lcm)
i=2
3*i
(3*i-3):(3*i)
i
i=1
(3*i-3):(3*i)
(3*i-2):(3*i)
2:dim(coords)[1]
i=2
j=1
(3*i-2):(3*i)
(3*j-2):(3*j)
i=26
j=25
(3*i-2):(3*i)
(3*j-2):(3*j)
for (i in 2:dim(coords)[1]) {
for (j in 1:(i-1)) {
x <- coords2d[,(3*i-2):(3*i)]
y <- coords2d[,(3*j-2):(3*j)]}}
dim(x)
dim(y)
XY.vcv <- cov(cbind(x,y))
XY.vcv
dim(XY.vcv)
x
cbind(x,y)
XY.vcv[1:dim(x)[2],(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])]
XY.vcv[1:dim(x)[2],1:dim(x)[2]]
XY.vcv[(dim(x)[2]+1):(dim(x)[2]+dim(y)[2]),(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])]
i=2
j=1
x <- coords2d[,(3*i-2):(3*i)]
y <- coords2d[,(3*j-2):(3*j)]
XY.vcv <- cov(cbind(x,y))
x
y
XY.vcv
S12 <- XY.vcv[1:dim(x)[2],(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])]
S11 <- XY.vcv[1:dim(x)[2],1:dim(x)[2]]
S22 <- XY.vcv[(dim(x)[2]+1):(dim(x)[2]+dim(y)[2]),(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])]
rv <- sum(diag(S12%*%t(S12)))/sqrt(sum(diag(S11%*%S11))*sum(diag(S22%*%S22)))
rv
1:dim(x)[2]
(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])
S12
x
k.primates.f$LCM
test=k.primates.f$LCM
?all.equal
PIC_kmeans <- function (coords, phy, rv = FALSE) {
# compute PICs for each landmark coordinate and save as [p x 3 x n-1] array
coords2d <- two.d.array(coords)
pics <- apply(coords2d, 2, function(x) pic(x, phy=phy))
# compute phylogenetically independent LCM and save as a [p x p] matrix
lcm <- matrix(1,dim(coords)[1],dim(coords)[1])
for (i in 2:dim(coords)[1]) {
for (j in 1:(i-1)) {
x <- coords2d[,(3*i-2):(3*i)]
y <- coords2d[,(3*j-2):(3*j)]
XY.vcv <- cov(cbind(x,y))
S12 <- XY.vcv[1:dim(x)[2],(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])]
S11 <- XY.vcv[1:dim(x)[2],1:dim(x)[2]]
S22 <- XY.vcv[(dim(x)[2]+1):(dim(x)[2]+dim(y)[2]),(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])]
rv <- sum(diag(S12%*%t(S12)))/sqrt(sum(diag(S11%*%S11))*sum(diag(S22%*%S22)))
lcm[i,j] <- lcm[j,i] <- rv
}
}
# perform k-means clustering for k = 1:p-1 and save as a list of p-1 vectors of length p
# save SSE for each value of k as a vector of length p-1
dist <- 1 - lcm
clusters <- list()
sse <- c()
for (i in 1:(dim(coords)[1]-1)) {
k <- kmeans(dist, i)
clusters[[i]] <- k$cluster
sse[i] <- k$tot.withinss
}
# return list
results <- list(PICs=pics, LCM=lcm, clust=clusters, SSE=sse)
return(results)
}
test2 <- PIC_kmeans(gpa.primates.f$coords, tree.primates.f)$LCM
library("geomorph")
library("tidyverse")
library("abind")
library("factoextra")
library("gridExtra")
test2 <- PIC_kmeans(gpa.primates.f$coords, tree.primates.f)$LCM
all.equal(test1, test2)
all.equal(test, test2)
head(test)
head(test2)
i
j
cov(cbind(coords2d[,(3*i-2):(3*i)],coords2d[,(3*j-2):(3*j)]))
cov(cbind(coords2d[,(3*i-3):(3*i)],coords2d[,(3*j-3):(3*j)]))
k.primates.f <- PIC_kmeans(gpa.primates.f$coords, tree.primates.f)
k.primates.m <- PIC_kmeans(gpa.primates.m$coords, tree.primates.m)
k.streps.f <- PIC_kmeans(gpa.streps.f$coords, tree.streps.f)
k.streps.m <- PIC_kmeans(gpa.streps.m$coords, tree.streps.m)
k.haps.f <- PIC_kmeans(gpa.haps.f$coords, tree.haps.f)
k.haps.m <- PIC_kmeans(gpa.haps.m$coords, tree.haps.m)
x=cmdscale(1-k.primates.f$LCM,k=25)
k.primates.f.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Primates - females", subtitle = "Elbow method")
k.primates.f.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.primates.f.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
# Cluster validation - all primates - males
x=cmdscale(1-k.primates.m$LCM, k=25)
k.primates.m.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Males", subtitle = "Elbow method")
k.primates.m.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.primates.m.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
grid.arrange(k.primates.f.plot1, k.primates.f.plot2, k.primates.f.plot3, k.primates.m.plot1, k.primates.m.plot2, k.primates.m.plot3, ncol=3)
grid.arrange(k.primates.f.plot1, k.primates.f.plot2, k.primates.f.plot3, k.primates.m.plot1, k.primates.m.plot2, k.primates.m.plot3, ncol=3)
x=cmdscale(1-k.streps.f$LCM, k=25)
k.streps.f.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Strepsirrhines - females", subtitle = "Elbow method")
k.streps.f.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.streps.f.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
# Cluster validation - strepsirrhines - males
x=cmdscale(1-k.streps.m$LCM, k=25)
k.streps.m.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Males", subtitle = "Elbow method")
k.streps.m.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.streps.m.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method", k.max=13)
grid.arrange(k.streps.f.plot1, k.streps.f.plot2, k.streps.f.plot3, k.streps.m.plot1, k.streps.m.plot2, k.streps.m.plot3, ncol=3)
x=cmdscale(1-k.haps.f$LCM, k=25)
k.haps.f.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Haplorhines - females", subtitle = "Elbow method")
k.haps.f.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.haps.f.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
x=cmdscale(1-k.haps.m$LCM, k=25)
k.haps.m.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Males", subtitle = "Elbow method")
k.haps.m.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.haps.m.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
x=cmdscale(1-k.streps.m$LCM, k=25)
k.streps.m.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Males", subtitle = "Elbow method")
k.streps.m.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.streps.m.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method", k.max=13)
x=cmdscale(1-k.streps.f$LCM, k=25)
k.streps.f.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Strepsirrhines - females", subtitle = "Elbow method")
k.streps.f.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.streps.f.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
grid.arrange(k.streps.f.plot1, k.streps.f.plot2, k.streps.f.plot3, k.streps.m.plot1, k.streps.m.plot2, k.streps.m.plot3, ncol=3)
# Cluster validation - haplorhines - females
x=cmdscale(1-k.haps.f$LCM, k=25)
k.haps.f.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Haplorhines - females", subtitle = "Elbow method")
k.haps.f.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.haps.f.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
x=cmdscale(1-k.haps.m$LCM, k=25)
k.haps.m.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Males", subtitle = "Elbow method")
k.haps.m.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.haps.m.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
grid.arrange(k.haps.f.plot1, k.haps.f.plot2, k.haps.f.plot3, k.haps.m.plot1, k.haps.m.plot2, k.haps.m.plot3, ncol=3)
# This function accepts GPA aligned 3D landmark coordinates [p x 3 x n] and executes the following operations:
# 1: compute phylogenetically independent contrasts (PIC) for each landmark coordinate [p x 3 x n-1]
# 2: use PICs to compute a phylogenetically independent landmark correlation matrix (LCM) [p x p]
# 3: perform k-means clustering for k = 1:p-1
# 4: compute sum of squared errors (SSE) for each value of k
# 5: return a list with the following elements
## (1) landmark PICs
## (2) phylogenetically independent LCM
## (3) k-means clustering results
## (4) SSE for each value of k
# The 'ape' package must be loaded
PIC_kmeans <- function (coords, phy, rv = FALSE) {
# compute PICs for each landmark coordinate and save as [p x 3 x n-1] array
coords2d <- two.d.array(coords)
pics <- apply(coords2d, 2, function(x) pic(x, phy=phy))
# compute phylogenetically independent LCM and save as a [p x p] matrix
lcm <- matrix(1,dim(coords)[1],dim(coords)[1])
for (i in 2:dim(coords)[1]) {
for (j in 1:(i-1)) {
x <- coords2d[,(3*i-2):(3*i)]
y <- coords2d[,(3*j-2):(3*j)]
XY.vcv <- cov(cbind(x,y))
S12 <- XY.vcv[1:dim(x)[2],(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])]
S11 <- XY.vcv[1:dim(x)[2],1:dim(x)[2]]
S22 <- XY.vcv[(dim(x)[2]+1):(dim(x)[2]+dim(y)[2]),(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])]
rv <- sum(diag(S12%*%t(S12)))/sqrt(sum(diag(S11%*%S11))*sum(diag(S22%*%S22)))
if (rv == FALSE) lcm[i,j] <- lcm[j,i] <- sum(diag(S12%*%t(S12))) else lcm[i,j] <- lcm[j,i] <- rv
}
}
# perform k-means clustering for k = 1:p-1 and save as a list of p-1 vectors of length p
# save SSE for each value of k as a vector of length p-1
dist <- 1 - lcm
clusters <- list()
sse <- c()
for (i in 1:(dim(coords)[1]-1)) {
k <- kmeans(dist, i)
clusters[[i]] <- k$cluster
sse[i] <- k$tot.withinss
}
# return list
results <- list(PICs=pics, LCM=lcm, clust=clusters, SSE=sse)
return(results)
}
# function to create list of landmarks in each cluster
clusters <- function(landmarks_names, cluster_ids) {
l <- list()
for (i in 1:max(cluster_ids)) {l[[i]] <- landmarks_names[cluster_ids==i]}
return(l)
}
test3=PIC_kmeans(gpa.primates.f$coords, tree.primates.f)$LCM
head(test3)
head(test2)
r=F
r
if (r == FALSE) x <- y <- 2 else x <- y <- 1
x
r=T
if (r == FALSE) x <- y <- 2 else x <- y <- 1
x
y
all.equal(PIC_kmeans(gpa.primates.f$coords, tree.primates.f)$LCM, PIC_kmeans(gpa.primates.f$coords, tree.primates.f, rv=TRUE))
all.equal(PIC_kmeans(gpa.primates.f$coords, tree.primates.f)$LCM, PIC_kmeans(gpa.primates.f$coords, tree.primates.f, rv=TRUE)$LCM)
# This function accepts GPA aligned 3D landmark coordinates [p x 3 x n] and executes the following operations:
# 1: compute phylogenetically independent contrasts (PIC) for each landmark coordinate [p x 3 x n-1]
# 2: use PICs to compute a phylogenetically independent landmark correlation matrix (LCM) [p x p]
# 3: perform k-means clustering for k = 1:p-1
# 4: compute sum of squared errors (SSE) for each value of k
# 5: return a list with the following elements
## (1) landmark PICs
## (2) phylogenetically independent LCM
## (3) k-means clustering results
## (4) SSE for each value of k
# The 'ape' package must be loaded
PIC_kmeans <- function (coords, phy, RV = FALSE) {
# compute PICs for each landmark coordinate and save as [p x 3 x n-1] array
coords2d <- two.d.array(coords)
pics <- apply(coords2d, 2, function(x) pic(x, phy=phy))
# compute phylogenetically independent LCM and save as a [p x p] matrix
lcm <- matrix(1,dim(coords)[1],dim(coords)[1])
for (i in 2:dim(coords)[1]) {
for (j in 1:(i-1)) {
x <- coords2d[,(3*i-2):(3*i)]
y <- coords2d[,(3*j-2):(3*j)]
# XY.vcv <- cov(cbind(x,y))
S12 <- XY.vcv[1:dim(x)[2],(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])]
S11 <- XY.vcv[1:dim(x)[2],1:dim(x)[2]]
S22 <- XY.vcv[(dim(x)[2]+1):(dim(x)[2]+dim(y)[2]),(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])]
rv <- sum(diag(S12%*%t(S12)))/sqrt(sum(diag(S11%*%S11))*sum(diag(S22%*%S22)))
if (RV == FALSE) lcm[i,j] <- lcm[j,i] <- sum(diag(S12%*%t(S12))) else lcm[i,j] <- lcm[j,i] <- rv
}
}
# perform k-means clustering for k = 1:p-1 and save as a list of p-1 vectors of length p
# save SSE for each value of k as a vector of length p-1
dist <- 1 - lcm
clusters <- list()
sse <- c()
for (i in 1:(dim(coords)[1]-1)) {
k <- kmeans(dist, i)
clusters[[i]] <- k$cluster
sse[i] <- k$tot.withinss
}
# return list
results <- list(PICs=pics, LCM=lcm, clust=clusters, SSE=sse)
return(results)
}
# function to create list of landmarks in each cluster
clusters <- function(landmarks_names, cluster_ids) {
l <- list()
for (i in 1:max(cluster_ids)) {l[[i]] <- landmarks_names[cluster_ids==i]}
return(l)
}
all.equal(PIC_kmeans(gpa.primates.f$coords, tree.primates.f)$LCM, PIC_kmeans(gpa.primates.f$coords, tree.primates.f, RV=TRUE)$LCM)
warnings()
k.primates.f <- PIC_kmeans(gpa.primates.f$coords, tree.primates.f)
k.primates.f <- PIC_kmeans(gpa.primates.f$coords, tree.primates.f)
# This function accepts GPA aligned 3D landmark coordinates [p x 3 x n] and executes the following operations:
# 1: compute phylogenetically independent contrasts (PIC) for each landmark coordinate [p x 3 x n-1]
# 2: use PICs to compute a phylogenetically independent landmark correlation matrix (LCM) [p x p]
# 3: perform k-means clustering for k = 1:p-1
# 4: compute sum of squared errors (SSE) for each value of k
# 5: return a list with the following elements
## (1) landmark PICs
## (2) phylogenetically independent LCM
## (3) k-means clustering results
## (4) SSE for each value of k
# The 'ape' package must be loaded
PIC_kmeans <- function (coords, phy, RV = FALSE) {
# compute PICs for each landmark coordinate and save as [p x 3 x n-1] array
coords2d <- two.d.array(coords)
pics <- apply(coords2d, 2, function(x) pic(x, phy=phy))
# compute phylogenetically independent LCM and save as a [p x p] matrix
lcm <- matrix(1,dim(coords)[1],dim(coords)[1])
for (i in 2:dim(coords)[1]) {
for (j in 1:(i-1)) {
x <- coords2d[,(3*i-2):(3*i)]
y <- coords2d[,(3*j-2):(3*j)]
XY.vcv <- cov(cbind(x,y))
S12 <- XY.vcv[1:dim(x)[2],(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])]
S11 <- XY.vcv[1:dim(x)[2],1:dim(x)[2]]
S22 <- XY.vcv[(dim(x)[2]+1):(dim(x)[2]+dim(y)[2]),(dim(x)[2]+1):(dim(x)[2]+dim(y)[2])]
rv <- sum(diag(S12%*%t(S12)))/sqrt(sum(diag(S11%*%S11))*sum(diag(S22%*%S22)))
if (RV == FALSE) lcm[i,j] <- lcm[j,i] <- sum(diag(S12%*%t(S12))) else lcm[i,j] <- lcm[j,i] <- rv
}
}
# perform k-means clustering for k = 1:p-1 and save as a list of p-1 vectors of length p
# save SSE for each value of k as a vector of length p-1
dist <- 1 - lcm
clusters <- list()
sse <- c()
for (i in 1:(dim(coords)[1]-1)) {
k <- kmeans(dist, i)
clusters[[i]] <- k$cluster
sse[i] <- k$tot.withinss
}
# return list
results <- list(PICs=pics, LCM=lcm, clust=clusters, SSE=sse)
return(results)
}
# function to create list of landmarks in each cluster
clusters <- function(landmarks_names, cluster_ids) {
l <- list()
for (i in 1:max(cluster_ids)) {l[[i]] <- landmarks_names[cluster_ids==i]}
return(l)
}
k.primates.f <- PIC_kmeans(gpa.primates.f$coords, tree.primates.f)
k.primates.f$LCM
PIC_kmeans(gpa.primates.f$coords, tree.primates.f, RV=TRUE)$LCM
k.primates.f <- PIC_kmeans(gpa.primates.f$coords, tree.primates.f)
k.primates.m <- PIC_kmeans(gpa.primates.m$coords, tree.primates.m)
k.streps.f <- PIC_kmeans(gpa.streps.f$coords, tree.streps.f)
k.streps.m <- PIC_kmeans(gpa.streps.m$coords, tree.streps.m)
k.haps.f <- PIC_kmeans(gpa.haps.f$coords, tree.haps.f)
k.haps.m <- PIC_kmeans(gpa.haps.m$coords, tree.haps.m)
x=cmdscale(1-k.primates.f$LCM,k=25)
k.primates.f.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Primates - females", subtitle = "Elbow method")
k.primates.f.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.primates.f.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
x=cmdscale(1-k.primates.m$LCM, k=25)
k.primates.m.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Males", subtitle = "Elbow method")
k.primates.m.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.primates.m.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
grid.arrange(k.primates.f.plot1, k.primates.f.plot2, k.primates.f.plot3, k.primates.m.plot1, k.primates.m.plot2, k.primates.m.plot3, ncol=3)
# Cluster validation - strepsirrhines - females
x=cmdscale(1-k.streps.f$LCM, k=25)
k.streps.f.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Strepsirrhines - females", subtitle = "Elbow method")
k.streps.f.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.streps.f.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
x=cmdscale(1-k.streps.m$LCM, k=25)
k.streps.m.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Males", subtitle = "Elbow method")
k.streps.m.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.streps.m.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method", k.max=13)
grid.arrange(k.streps.f.plot1, k.streps.f.plot2, k.streps.f.plot3, k.streps.m.plot1, k.streps.m.plot2, k.streps.m.plot3, ncol=3)
x=cmdscale(1-k.haps.f$LCM, k=25)
k.haps.f.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Haplorhines - females", subtitle = "Elbow method")
k.haps.f.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.haps.f.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
x=cmdscale(1-k.haps.m$LCM, k=25)
k.haps.m.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Males", subtitle = "Elbow method")
k.haps.m.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.haps.m.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
grid.arrange(k.haps.f.plot1, k.haps.f.plot2, k.haps.f.plot3, k.haps.m.plot1, k.haps.m.plot2, k.haps.m.plot3, ncol=3)
x
x=cmdscale(k.haps.f$LCM, k=25)
k.haps.f.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Haplorhines - females", subtitle = "Elbow method")
k.haps.f.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.haps.f.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
# Cluster validation - haplorhines - males
x=cmdscale(k.haps.m$LCM, k=25)
k.haps.m.plot1 <- fviz_nbclust(x, kmeans, method = "wss", k.max=13) +
labs(title="Males", subtitle = "Elbow method")
k.haps.m.plot2 <- fviz_nbclust(x, kmeans, method = "silhouette", k.max=13) +
labs(title="", subtitle = "Silhouette method")
k.haps.m.plot3 <- fviz_nbclust(x, kmeans, method = "gap_stat", k.max=13) +
labs(title="", subtitle = "Gap statistic method")
grid.arrange(k.haps.f.plot1, k.haps.f.plot2, k.haps.f.plot3, k.haps.m.plot1, k.haps.m.plot2, k.haps.m.plot3, ncol=3)
k.haps.m$LCM
x
x=cmdscale(1-k.streps.m$LCM, k=25)
x=cmdscale(1-k.haps.f$LCM, k=25)
x
range(k.primates.f$LCM)
?cdmscale
?cmdscale
?fviz_nbclust
