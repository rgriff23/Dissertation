1000/60
# oauth
source('~/Dropbox/Code/R/twitter_setup_katie.R', chdir = TRUE)
# import data
tweet_data <- read.csv("https://raw.githubusercontent.com/rgriff23/Katie_Hinde_Twitter_storm_text_analysis/master/data/tweet_data.csv", row.names=1)
# setup
friends <- list()
lookup <- unique(tweet_data$user[tweet_data$friendCount < 2000]) # keeps 92.4% of users (4307)
# loop to get friends (numbers 1-1000)
for (i in 1:1000) {
temp <- try(getUser(lookup[i])$getFriendIDs(retryOnRateLimit=100))
if (class(temp)=="try-error") {friends[[i]] <- NA} else {friends[[i]] <- temp}
print(i)
}
length(friends)
names(friends)
names(friends) <- lookup[1:1000]
saveRDS(friends_1_1000, "~/Dropbox/KatieHindeDataParts/friends_1_1000.rds")
saveRDS(friends, "~/Dropbox/KatieHindeDataParts/friends_1_1000.rds")
library("igraph")
g=make_full_graph(10)
l=layout_with_fr(g)
l
plot(g,l)
plot(g,layout=l)
g2=delete.edges(g,E(g))
g2
plot(g2,layout=l)
g
?layout_with_fr
g <- readRDS("~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/data/graph_fancy.rds")
layout_fr <- layout_with_fr(g, weights=NULL)
g2 <- delete_edges(g, E(g))
?layout_fr
plot(g2, vertex.label=V(g2)$label_special, layout=layout_fr, main="Fruchterman & Reingold")
?layout_with_drl
layout_drl <- layout_with_drl(g)
saveRDS("~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/data/graph_layout.rds")
saveRDS(layout_drl, "~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/data/graph_layout.rds")
g2 <- delete_edges(g, E(g))
plot(g2, vertex.label=V(g2)$label_special, layout=layout_drl, main="Distributed recursive layout")
head(layout_drl)
range(layout_drl[,1])
range(layout_drl[,2])
hist(layout_drl[,2])
hist(layout_drl[,2],breaks=100)
hist(layout_drl[,1],breaks=100)
fivenum(layout_drl[,1])
fivenum(layout_drl[,2])
plot(g2, xlim=c(11,12), ylim=c(-32,-33), vertex.label=V(g2)$label_special, layout=layout_drl, main="Distributed recursive layout")
?plot.igraph
plot(g2, xlim=c(-32,-33), ylim=c(11,12), vertex.label=V(g2)$label_special, layout=layout_drl, main="Distributed recursive layout")
g2
xlim=c(-32,-33), ylim=c(11,12),
plot(g2, vertex.label=V(g2)$label_special, layout=layout_drl, main="Distributed recursive layout")
xlim=c(-32,-33), ylim=c(11,12),
plot(g2,xlim=c(-32,33), ylim=c(-11,12), vertex.label=V(g2)$label_special, layout=layout_drl, main="Distributed recursive layout")
xlim=c(-32,-33), ylim=c(11,12),
plot(g2,xlim=c(-32,33), ylim=c(11,12), vertex.label=V(g2)$label_special, layout=layout_drl, main="Distributed recursive layout")
xlim=c(-32,-33), ylim=c(11,12),
plot(g2,ylim=c(-32,33), xlim=c(11,12), vertex.label=V(g2)$label_special, layout=layout_drl, main="Distributed recursive layout")
xlim=c(-32,-33), ylim=c(11,12),
plot(g2,axes=TRUE, ylim=c(-32,33), xlim=c(11,12), vertex.label=V(g2)$label_special, layout=layout_drl, main="Distributed recursive layout")
xlim=c(-32,-33), ylim=c(11,12),
plot(g2,axes=TRUE, ylim=c(-1,1), xlim=c(-10,10), vertex.label=V(g2)$label_special, layout=layout_drl, main="Distributed recursive layout")
xlim=c(-32,-33), ylim=c(11,12),
plot(g2,axes=TRUE, ylim=c(-1,1), xlim=c(-10,10), layout=layout_drl, main="Distributed recursive layout")
xlim=c(-32,-33), ylim=c(11,12),
vertex.label=V(g2)$label_special,
plot(g2,axes=TRUE, xlim=c(-32,-33), ylim=c(11,12), layout=layout_drl, main="Distributed recursive layout")
g <- readRDS("~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/data/graph_fancy.rds")
g <- delete_vertices(g, V(g)$membership>3)
range(E(g)$weight)
E(g)$weight <- log(E(g)$weight)
range(E(g)$weight)
g <- delete_vertices(g, V(g)$membership>3)
E(g)$weight <- log1p(E(g)$weight)
range(E(g)$weight)
g <- readRDS("~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/data/graph_fancy.rds")
g <- delete_vertices(g, V(g)$membership>3)
E(g)$weight <- log1p(E(g)$weight)
range(E(g)$weight)
layout_drl <- layout_with_drl(g)
fivenum(layout_drl[,1])
fivenum(layout_drl[,2])
saveRDS(layout_drl, "~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/data/graph_layout.rds")
g2 <- delete_edges(g, E(g))
plot(g2,axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=0.25, layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=0.25, layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=0.5, layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=1, layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.frame.color="black", layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="white", vertex.frame.color="black", layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="green", vertex.frame.color="black", layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="darkgreen", vertex.label.font=3,  vertex.frame.color="black", layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="darkgreen", vertex.label.font=2,  vertex.frame.color="black", layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="orange", vertex.label.font=2,  vertex.frame.color="black", layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="green", vertex.label.font=2,  vertex.frame.color="black", layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="goldenrod", vertex.label.font=2,  vertex.frame.color="black", layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="goldenrod4", vertex.label.font=2,  vertex.frame.color="black", layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), axes=TRUE, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="green", vertex.label.font=2,  vertex.frame.color="black", layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="green", vertex.label.font=2,  vertex.frame.color="black", layout=layout_drl, main="Distributed recursive layout")
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="green", vertex.label.font=2,  vertex.frame.color="black", layout=layout_drl)
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="green", vertex.label.font=2,  vertex.frame.color="black", layout=layout_drl, margin=c(0,0,0,0))
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="purple", vertex.label.font=2,  vertex.frame.color="black", layout=layout_drl)
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="green", vertex.label.font=2,  vertex.frame.color="black", layout=layout_drl)
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="green", vertex.label.font=2, layout=layout_drl)
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="darkgreen", vertex.label.font=2, layout=layout_drl)
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=layout_drl)
V(g2)$label_special
which(!is.na(V(g2)$label_special))
V(g2)$label_special[which(!is.na(V(g2)$label_special))]
V(g2)$color[which(!is.na(V(g2)$label_special))]
V(g2)$time_bin[which(!is.na(V(g2)$label_special))]
unique(V(g2)$time_bin)
gry_blk <- colorRampPalette(c("lightgray","black"))
gry_blk <- gry_blk(12)
V(g)$color2 <- gry_blk[V(g)$time_bin]
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.color=V(g)$color2, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=layout_drl)
gry_blk <- colorRampPalette(c("white","black"))
gry_blk <- gry_blk(12)
V(g)$color2 <- gry_blk[V(g)$time_bin]
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.color=V(g)$color2, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=layout_drl)
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.color=V(g)$color2, vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="red", vertex.label.font=2, layout=layout_drl)
g
saveRDS(g, "~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/data/graph_fancy.rds")
g <- readRDS("~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/data/graph_fancy.rds")
g_layout <- readRDS("~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/data/graph_layout.rds")
# remove edges for plotting
g2 <- delete_edges(g, E(g))
# plot
plot(g2, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=V(g2)$label_special, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
library(animation)
?saveGIF
vcount(g)
vcount(g2)
sum(is.na(V(g2)$color))
i=1
V(g2)$label[V(g2)$time_bin<i]
i=2
V(g2)$label[V(g2)$time_bin<i]
saveGIF({
cols <- rep("white", vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 1:13) {
cols[V(g2)$time_bin<i] <- V(g2)$colors[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
i=1
cols <- rep("white", vcount(g2))
labs <- rep(NA, vcount(g2))
cols[V(g2)$time_bin<i]
saveGIF({
cols <- rep("white", vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$colors[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
i=2
cols[V(g2)$time_bin<i]
V(g2)$colors[V(g2)$time_bin<i]
V(g2)$color[V(g2)$time_bin<i]
saveGIF({
cols <- rep("white", vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
sum(is.na(V(g2)$color))
which(V(g2)$time_bin<i)
vcount(g2)
length(V(g2)$color)
V(g2)$time_bin<i
sum(is.na(V(g2)$time_bin<i))
sum(is.na(V(g2)$time_bin))
which(is.na(V(g2)$time_bin))
V(g2)[3546]
V(g2)$label[3546]
V(g2)$color[3546]
V(g2)$time_bin[3546]
V(g2)$time_bin[3547]
V(g2)$time_bin[3545]
V(g2)$time_bin[3546] <- 5
which(is.na(V(g2)$time_bin))
which(is.na(V(g)$time_bin))
V(g)$time_bin[3546] <- 5
g
saveRDS(g, "~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/data/graph_fancy.rds")
saveGIF({
cols <- rep("white", vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
topfriendsSN1 # idk?
topfriendsSN2 # the right
topfriendsSN3 # the left
head(twitter_data)
head(tweet_data)
tweet_data <- read.csv("~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/data/tweet_data.csv")
tweet_data$sentimentA <- factor(tweet_data$sentimentA, levels=c("Very Negative", "Negative", "Neutral", "Positive","Very Positive"))
tweet_data$sentimentB <- factor(tweet_data$sentimentB, levels=c("joy","sadness","anger","surprise","fear","disgust"))
tweet_data$time <- as.POSIXct(tweet_data$time, format="%Y-%m-%d %H:%M:%S")
head(tweet_data)
sum(is.na(tweet_data$cluster))
library(ggplot2)
geom_bar
?geom_bar
?barplot
table(tweet_data$sentimentA, tweet_data$cluster)
table(tweet_data$sentimentA, tweet_data$cluster)[,1:3]
tab1 <- table(tweet_data$sentimentA, tweet_data$cluster)[,1:3]
barplot(tab1, beside=TRUE, col=c("gray","red","blue"))
barplot(tab1, beside=TRUE, col=c("gray","red","blue"), legend.text = c("Apolitical", "Rightwing", "Leftwing"))
?legend
barplot(tab1, beside=TRUE, col=c("gray","red","blue"),
legend.text = c("Apolitical", "Rightwing", "Leftwing"),
args.legend = list("topleft"))
barplot(tab1, beside=TRUE, col=c("gray","red","blue"),
args.legend = list("topleft"))
legend("topleft", legend=c("Apolitical", "Rightwing", "Leftwing"))
legend("topleft", legend=c("Apolitical", "Rightwing", "Leftwing"), fill=c("gray","red","blue"))
barplot(tab1, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"))
barplot(tab1, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"),
main="Emotional valence (very negative to very positive)")
tab2 <- table(tweet_data$sentimentB, tweet_data$cluster)[,1:3]
tab2
barplot(tab2, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"),
main="Emotional tone (joy, sadness, anger, surprise, fear, disgust)")
library("tm")
library("wordcloud")
# create corpuses (corpi?)
corpus1 <- Corpus(VectorSource(tweet_data$text[tweet_data$cluster==1]))
corpus1 <- tm_map(tm_map(corpus1, removeWords, stopwords('english')), stemDocument)
corpus2 <- Corpus(VectorSource(tweet_data$text[tweet_data$cluster==2]))
corpus2 <- tm_map(tm_map(corpus2, removeWords, stopwords('english')), stemDocument)
corpus3 <- Corpus(VectorSource(tweet_data$text[tweet_data$cluster==3]))
corpus3 <- tm_map(tm_map(corpus3, removeWords, stopwords('english')), stemDocument)
# wordclouds
wordcloud(corpus1$content, max.words = 100, colors=heat.colors(6), random.order = FALSE)
wordcloud(corpus2$content, max.words = 100, colors=heat.colors(6), random.order = FALSE)
wordcloud(corpus3$content, max.words = 100, colors=heat.colors(6), random.order = FALSE)
cols <- rep("white", vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout);sleep(3)
}
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
sleep(5)
print(i)
}
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
Sys.sleep(5)
print(i)
}
?barplot
tab0 <- table(tweet_data$time_bin, tweet_data$cluster)[1:3]
tab0
tab0 <- table(tweet_data$time_bin, tweet_data$cluster)[,1:3]
tab0
colnames(tab0) <- c("Apolitical","Rightwing","Leftwing")
rownames(tab0) <- 1:12
tab0
barplot(tab0, beside=FALSE)
#
tab0 <- table(tweet_data$cluster,tweet_data$time_bin)[1:3,]
rownames(tab0) <- c("Apolitical","Rightwing","Leftwing")
colnames(tab0) <- 1:12
barplot(tab0, beside=FALSE)
barplot(tab0, beside=FALSE, col=c("red","yellow","blue"))
barplot(tab0, beside=FALSE, col=c("gray","red","blue"), xlab="time", ylab="frequency")
legend("topleft", fill=c("gray","red","blue"), legend= c("Apolitical","Rightwing","Leftwing"))
barplot(tab0, beside=FALSE, col=c("gray","red","blue"), xlab="time", ylab="frequency")
legend("topleft", fill=c("blue","red","gray"), legend= c("Leftwing","Rightwing","Apolitical"))
# side-by-side barplot for emotional valence
tab1 <- table(tweet_data$sentimentA, tweet_data$cluster)[,1:3]
barplot(tab1, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"),
main="Emotional valence (very negative to very positive)")
# side-by-side barplot for emotional tone
tab2 <- table(tweet_data$sentimentB, tweet_data$cluster)[,1:3]
barplot(tab2, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"),
main="Emotional tone (joy, sadness, anger, surprise, fear, disgust)")
wordcloud(corpus1$content, max.words = 100, colors=heat.colors(6), random.order = FALSE)
wordcloud(corpus2$content, max.words = 100, colors=heat.colors(6), random.order = FALSE)
wordcloud(corpus3$content, max.words = 100, colors=heat.colors(6), random.order = FALSE)
cloudC <- ddply(tweet_data[tweet_data$cluster%in%c(1:3),], .(cluster), function (x) {paste(x$text, collapse=" ")})
cloudC <- Corpus(VectorSource(cloudC$V1))
cloudC <- tm_map(tm_map(cloudC, removeWords, stopwords('english')), stemDocument)
cloudC <- as.matrix(TermDocumentMatrix(cloudC))
library(plyr)
cloudC <- ddply(tweet_data[tweet_data$cluster%in%c(1:3),], .(cluster), function (x) {paste(x$text, collapse=" ")})
cloudC <- Corpus(VectorSource(cloudC$V1))
cloudC <- tm_map(tm_map(cloudC, removeWords, stopwords('english')), stemDocument)
cloudC <- as.matrix(TermDocumentMatrix(cloudC))
colnames(cloudC) <- levels(tweet_data$sentimentC)
levels(tweet_data$sentimentC)
colnames(cloudC) <- 1:3
cloudC
cloudC <- cloudC[,c("Apolitical", "Rightwing","Leftwing")]
comparison.cloud(cloudC, max.words=60, scale=c(4,.5), title.size=2, colors=c("gray","red","blue"))
colnames(cloudC) <- c("Apolitical", "Rightwing","Leftwing")
comparison.cloud(cloudC, max.words=60, scale=c(4,.5), title.size=2, colors=c("gray","red","blue"))
colSums(cloudC)
tab0 <- table(tweet_data$cluster,tweet_data$time_bin)[1:3,]
rownames(tab0) <- c("Apolitical","Rightwing","Leftwing")
colnames(tab0) <- 1:12
barplot(tab0, beside=FALSE, col=c("gray","red","blue"), xlab="time", ylab="frequency")
legend("topleft", fill=c("blue","red","gray"), legend= c("Leftwing","Rightwing","Apolitical"))
# side-by-side barplot for emotional valence
tab1 <- table(tweet_data$sentimentA, tweet_data$cluster)[,1:3]
barplot(tab1, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"),
main="Emotional valence (very negative to very positive)")
# side-by-side barplot for emotional tone
tab2 <- table(tweet_data$sentimentB, tweet_data$cluster)[,1:3]
barplot(tab2, beside=TRUE, names.arg=c("Apolitical","Rightwing","Leftwing"),
main="Emotional tone (joy, sadness, anger, surprise, fear, disgust)")
saveGIF({
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
convert <- "/opt/local/bin"
convert <- "/opt/local/bin/"
saveGIF({
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
convert <- "/opt/local/bin/convert"
saveGIF({
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
saveGIF({
cols <- rep(NA, vcount(g2))
labs <- rep(NA, vcount(g2))
for (i in 2:13) {
cols[V(g2)$time_bin<i] <- V(g2)$color[V(g2)$time_bin<i]
labs[V(g2)$time_bin<i] <- V(g2)$label_special[V(g2)$time_bin<i]
plot(g2, vertex.color=cols, ylim=c(-1,0.5), xlim=c(-0.5,1), vertex.label=labs, vertex.label.cex=1, vertex.label.color="black", vertex.label.font=2, layout=g_layout)
}
},
interval=1, movie.name="~/Desktop/GitHub/Katie_Hinde_Twitter_storm_text_analysis/network_animation.gif")
# load packages
library("geomorph")
library("plyr")
library("tidyverse")
library("abind")
library("ggtree")
# set working directory
setwd("~/Desktop/GitHub/Dissertation/Chapter_4/")
# load custom functions
source("R/functions/read.pp.R")
source("R/functions/plot_wireframes.R")
source("R/functions/plotGMPhyloMorphoSpace_axisflip.R")
# read & tidy data
data <- read.csv("data/primate_data.csv") %>%
mutate(Folivore = ifelse(Diet %in% c("Folivore", "Frug-Fol"), 1, 0),
id = paste(Genus, Species, Sex, MuseumID, sep="_"),
genus_species = paste(Genus, Species, sep="_")) %>%
select(1:14, Folivore, id, genus_species) %>%
arrange(id)
# read phylogeny
tree <- read.nexus("../Chapter_2/data/tree.nex")
# read landmarks & add dimnames
path = "data/"
files <- paste(path, list.files(path=path, pattern=".pp"), sep="")
landmarks <- NULL
for (i in 1:length(files)) {landmarks <- abind(landmarks, read.pp(files[i]), along=3)}
dimnames(landmarks)[[3]] <- unlist(strsplit(unlist(strsplit(files, path))[seq(from=2, to=244, length.out=122)], "_picked_points.pp"))
rm(path, files)
# separate data for males and females
data.f <- filter(data, SexDat %in% c("F","B")) %>% select(-Sex, -SexDat)
data.m <- filter(data, SexDat %in% c("M","B")) %>% select(-Sex, -SexDat)
# separate tree for males and females
tree.f <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% data.f$genus_species)])
tree.m <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% data.m$genus_species)])
# separate landmarks for males and females
landmarks.f <- landmarks[,,dimnames(landmarks)[[3]]%in%data.f$id]
dimnames(landmarks.f)[[3]] <- data.f$genus_species
landmarks.m <- landmarks[,,dimnames(landmarks)[[3]]%in%data.m$id]
dimnames(landmarks.m)[[3]] <- data.m$genus_species
# estimate missing landmarks for males and females
landmarks.f <- estimate.missing(landmarks.f, method="Reg")
dimnames(landmarks.f)[1:2] <- dimnames(landmarks)[1:2]
landmarks.m <- estimate.missing(landmarks.m, method="Reg")
dimnames(landmarks.m)[1:2] <- dimnames(landmarks)[1:2]
# procrustes alignment for males and females
gpa.f <- gpagen(landmarks.f)
gpa.m <- gpagen(landmarks.m)
# add centroid size to data
data.f$Csize <- gpa.f$Csize
data.m$Csize <- gpa.m$Csize
# create geomorph dataframe for males and females
gdf.f <- geomorph.data.frame(gpa.f, phy=tree.f,
PhysicalAlignment=data.f$PhysicalAlignment,
BodyMass=data.f$BodyMass,
DimorphismIndex=data.f$DimorphismIndex,
Nocturnal=data.f$Nocturnal,
Gouging=data.f$Gouging,
Folivore=data.f$Folivore)
gdf.m <- geomorph.data.frame(gpa.m, phy=tree.m,
PhysicalAlignment=data.m$PhysicalAlignment,
BodyMass=data.m$BodyMass,
DimorphismIndex=data.m$DimorphismIndex,
Nocturnal=data.m$Nocturnal,
Gouging=data.m$Gouging,
Folivore=data.m$Folivore)
layout(matrix(1:2, 2, 1))
plotGMPhyloMorphoSpace_axisflip(tree.f, gpa.f$coords, tip.text=gsub("_.*","",tree.f$tip.label), node.labels=F, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.7))
mtext("Females", line=1, cex=3)
plotGMPhyloMorphoSpace_axisflip(tree.m, gpa.m$coords, tip.text=gsub("_.*","",tree.m$tip.label), node.labels=F, yaxis=-2, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.7))
mtext("Males", line=1, cex=3)
plotGMPhyloMorphoSpace_axisflip(tree.f, gpa.f$coords, tip.text=gsub("_.*","",tree.f$tip.label), node.labels=F, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=1.2))
mtext("Females", line=1, cex=2)
plotGMPhyloMorphoSpace_axisflip(tree.m, gpa.m$coords, tip.text=gsub("_.*","",tree.m$tip.label), node.labels=F, yaxis=-2, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=1.2))
mtext("Males", line=1, cex=2)
quartz()
layout(matrix(1:2, 2, 1))
plotGMPhyloMorphoSpace_axisflip(tree.f, gpa.f$coords, tip.text=gsub("_.*","",tree.f$tip.label), node.labels=F, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=1))
mtext("Females", line=1, cex=2)
plotGMPhyloMorphoSpace_axisflip(tree.m, gpa.m$coords, tip.text=gsub("_.*","",tree.m$tip.label), node.labels=F, yaxis=-2, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=1))
mtext("Males", line=1, cex=2)
quartz()
layout(matrix(1:2, 2, 1))
plotGMPhyloMorphoSpace_axisflip(tree.f, gpa.f$coords, tip.text=gsub("_.*","",tree.f$tip.label), node.labels=F, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.7))
mtext("Females", line=1, cex=2)
plotGMPhyloMorphoSpace_axisflip(tree.m, gpa.m$coords, tip.text=gsub("_.*","",tree.m$tip.label), node.labels=F, yaxis=-2, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.7))
mtext("Males", line=1, cex=2)
plotGMPhyloMorphoSpace_axisflip(tree.f, gpa.f$coords, tip.text=gsub("_.*","",tree.f$tip.label), node.labels=F, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.5))
mtext("Females", line=1, cex=1)
plotGMPhyloMorphoSpace_axisflip(tree.m, gpa.m$coords, tip.text=gsub("_.*","",tree.m$tip.label), node.labels=F, yaxis=-2, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.5))
mtext("Males", line=1, cex=1)
plotGMPhyloMorphoSpace_axisflip(tree.f, gpa.f$coords*2, tip.text=gsub("_.*","",tree.f$tip.label), node.labels=F, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.5))
mtext("Females", line=1, cex=1)
quartz()
plotGMPhyloMorphoSpace_axisflip(tree.f, gpa.f$coords, tip.text=gsub("_.*","",tree.f$tip.label), node.labels=F, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.5))
mtext("Females", line=1, cex=1)
plotGMPhyloMorphoSpace_axisflip(tree.f, gpa.f$coords, tip.text=gsub("_.*","",tree.f$tip.label), node.labels=F, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=1))
mtext("Females", line=1, cex=1)
plotGMPhyloMorphoSpace_axisflip(tree.f, gpa.f$coords, tip.text=gsub("_.*","",tree.f$tip.label), node.labels=F, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.8))
mtext("Females", line=1, cex=1)
plotGMPhyloMorphoSpace_axisflip(tree.f, gpa.f$coords, tip.text=gsub("_.*","",tree.f$tip.label), node.labels=F, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.8))
mtext("Females", line=1, cex=1.5)
plotGMPhyloMorphoSpace_axisflip(tree.m, gpa.m$coords, tip.text=gsub("_.*","",tree.m$tip.label), node.labels=F, yaxis=-2, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.8))
mtext("Males", line=1, cex=1.5)
plotGMPhyloMorphoSpace_axisflip(tree.m, gpa.m$coords, tip.text=gsub("_.*","",tree.m$tip.label), node.labels=F, yaxis=-2, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.8))
mtext("Males", line=1, cex=1.5)
quartz()
plotGMPhyloMorphoSpace_axisflip(tree.m, gpa.m$coords, tip.text=gsub("_.*","",tree.m$tip.label), node.labels=F, yaxis=-2, plot.param=list(t.cex=0.3, n.cex=0.3, lwd=0.3, txt.cex=0.8))
mtext("Males", line=1, cex=1.5)
